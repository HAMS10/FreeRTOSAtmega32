
FreeRTOSCpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000d1a  00000dae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000063e  00800070  00800070  00000dbe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000df0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000286c  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc7  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a14  00000000  00000000  000045f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000718  00000000  00000000  0000600c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f6a  00000000  00000000  00006724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022c8  00000000  00000000  0000768e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  00009956  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 81 06 	call	0xd02	; 0xd02 <main>
  8a:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ec 01       	movw	r28, r24
                }
            }
        }
    #endif

    vTaskSuspendAll();
  98:	0e 94 1f 04 	call	0x83e	; 0x83e <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
  9c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  a0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
  a4:	89 2b       	or	r24, r25
  a6:	31 f4       	brne	.+12     	; 0xb4 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  a8:	85 e7       	ldi	r24, 0x75	; 117
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__data_end+0x1>
  b0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
  b4:	20 97       	sbiw	r28, 0x00	; 0
  b6:	c9 f0       	breq	.+50     	; 0xea <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  b8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <xNextFreeByte>
  bc:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <xNextFreeByte+0x1>
  c0:	9e 01       	movw	r18, r28
  c2:	28 0f       	add	r18, r24
  c4:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) && /* valid size */
  c6:	2b 3d       	cpi	r18, 0xDB	; 219
  c8:	45 e0       	ldi	r20, 0x05	; 5
  ca:	34 07       	cpc	r19, r20
  cc:	88 f4       	brcc	.+34     	; 0xf0 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  ce:	82 17       	cp	r24, r18
  d0:	93 07       	cpc	r25, r19
  d2:	88 f4       	brcc	.+34     	; 0xf6 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
  d4:	c0 91 70 00 	lds	r28, 0x0070	; 0x800070 <__data_end>
  d8:	d0 91 71 00 	lds	r29, 0x0071	; 0x800071 <__data_end+0x1>
  dc:	c8 0f       	add	r28, r24
  de:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
  e0:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <xNextFreeByte+0x1>
  e4:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <xNextFreeByte>
  e8:	08 c0       	rjmp	.+16     	; 0xfa <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	05 c0       	rjmp	.+10     	; 0xfa <pvPortMalloc+0x68>
  f0:	c0 e0       	ldi	r28, 0x00	; 0
  f2:	d0 e0       	ldi	r29, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <pvPortMalloc+0x68>
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
  fa:	0e 94 3f 05 	call	0xa7e	; 0xa7e <xTaskResumeAll>
            }
        }
    #endif

    return pvReturn;
}
  fe:	ce 01       	movw	r24, r28
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 106:	08 95       	ret

00000108 <vListInitialise>:
    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
 108:	fc 01       	movw	r30, r24
 10a:	03 96       	adiw	r24, 0x03	; 3
 10c:	92 83       	std	Z+2, r25	; 0x02
 10e:	81 83       	std	Z+1, r24	; 0x01
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	3f ef       	ldi	r19, 0xFF	; 255
 114:	34 83       	std	Z+4, r19	; 0x04
 116:	23 83       	std	Z+3, r18	; 0x03
 118:	96 83       	std	Z+6, r25	; 0x06
 11a:	85 83       	std	Z+5, r24	; 0x05
 11c:	90 87       	std	Z+8, r25	; 0x08
 11e:	87 83       	std	Z+7, r24	; 0x07
 120:	10 82       	st	Z, r1
 122:	08 95       	ret

00000124 <vListInitialiseItem>:
 124:	fc 01       	movw	r30, r24
 126:	11 86       	std	Z+9, r1	; 0x09
 128:	10 86       	std	Z+8, r1	; 0x08
 12a:	08 95       	ret

0000012c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 132:	a0 85       	ldd	r26, Z+8	; 0x08
 134:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 136:	c2 81       	ldd	r28, Z+2	; 0x02
 138:	d3 81       	ldd	r29, Z+3	; 0x03
 13a:	84 81       	ldd	r24, Z+4	; 0x04
 13c:	95 81       	ldd	r25, Z+5	; 0x05
 13e:	9d 83       	std	Y+5, r25	; 0x05
 140:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 142:	c4 81       	ldd	r28, Z+4	; 0x04
 144:	d5 81       	ldd	r29, Z+5	; 0x05
 146:	82 81       	ldd	r24, Z+2	; 0x02
 148:	93 81       	ldd	r25, Z+3	; 0x03
 14a:	9b 83       	std	Y+3, r25	; 0x03
 14c:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 14e:	11 96       	adiw	r26, 0x01	; 1
 150:	8d 91       	ld	r24, X+
 152:	9c 91       	ld	r25, X
 154:	12 97       	sbiw	r26, 0x02	; 2
 156:	e8 17       	cp	r30, r24
 158:	f9 07       	cpc	r31, r25
 15a:	31 f4       	brne	.+12     	; 0x168 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 15c:	84 81       	ldd	r24, Z+4	; 0x04
 15e:	95 81       	ldd	r25, Z+5	; 0x05
 160:	12 96       	adiw	r26, 0x02	; 2
 162:	9c 93       	st	X, r25
 164:	8e 93       	st	-X, r24
 166:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 168:	11 86       	std	Z+9, r1	; 0x09
 16a:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
 16c:	8c 91       	ld	r24, X
 16e:	81 50       	subi	r24, 0x01	; 1
 170:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
 172:	8c 91       	ld	r24, X
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 17a:	1b bc       	out	0x2b, r1	; 43
 17c:	8c e7       	ldi	r24, 0x7C	; 124
 17e:	8a bd       	out	0x2a, r24	; 42
 180:	8b e0       	ldi	r24, 0x0B	; 11
 182:	8e bd       	out	0x2e, r24	; 46
 184:	89 b7       	in	r24, 0x39	; 57
 186:	80 61       	ori	r24, 0x10	; 16
 188:	89 bf       	out	0x39, r24	; 57
 18a:	08 95       	ret

0000018c <pxPortInitialiseStack>:
 18c:	31 e1       	ldi	r19, 0x11	; 17
 18e:	fc 01       	movw	r30, r24
 190:	30 83       	st	Z, r19
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	22 e2       	ldi	r18, 0x22	; 34
 196:	20 83       	st	Z, r18
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	a3 e3       	ldi	r26, 0x33	; 51
 19c:	a0 83       	st	Z, r26
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	60 83       	st	Z, r22
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	70 83       	st	Z, r23
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	10 82       	st	Z, r1
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	60 e8       	ldi	r22, 0x80	; 128
 1ae:	60 83       	st	Z, r22
 1b0:	31 97       	sbiw	r30, 0x01	; 1
 1b2:	10 82       	st	Z, r1
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	60 83       	st	Z, r22
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	63 e0       	ldi	r22, 0x03	; 3
 1be:	60 83       	st	Z, r22
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	64 e0       	ldi	r22, 0x04	; 4
 1c4:	60 83       	st	Z, r22
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	65 e0       	ldi	r22, 0x05	; 5
 1ca:	60 83       	st	Z, r22
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	66 e0       	ldi	r22, 0x06	; 6
 1d0:	60 83       	st	Z, r22
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	67 e0       	ldi	r22, 0x07	; 7
 1d6:	60 83       	st	Z, r22
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	68 e0       	ldi	r22, 0x08	; 8
 1dc:	60 83       	st	Z, r22
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	69 e0       	ldi	r22, 0x09	; 9
 1e2:	60 83       	st	Z, r22
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	60 e1       	ldi	r22, 0x10	; 16
 1e8:	60 83       	st	Z, r22
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	30 83       	st	Z, r19
 1ee:	31 97       	sbiw	r30, 0x01	; 1
 1f0:	32 e1       	ldi	r19, 0x12	; 18
 1f2:	30 83       	st	Z, r19
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	33 e1       	ldi	r19, 0x13	; 19
 1f8:	30 83       	st	Z, r19
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	34 e1       	ldi	r19, 0x14	; 20
 1fe:	30 83       	st	Z, r19
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	35 e1       	ldi	r19, 0x15	; 21
 204:	30 83       	st	Z, r19
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	36 e1       	ldi	r19, 0x16	; 22
 20a:	30 83       	st	Z, r19
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	37 e1       	ldi	r19, 0x17	; 23
 210:	30 83       	st	Z, r19
 212:	31 97       	sbiw	r30, 0x01	; 1
 214:	38 e1       	ldi	r19, 0x18	; 24
 216:	30 83       	st	Z, r19
 218:	31 97       	sbiw	r30, 0x01	; 1
 21a:	39 e1       	ldi	r19, 0x19	; 25
 21c:	30 83       	st	Z, r19
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	30 e2       	ldi	r19, 0x20	; 32
 222:	30 83       	st	Z, r19
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	31 e2       	ldi	r19, 0x21	; 33
 228:	30 83       	st	Z, r19
 22a:	31 97       	sbiw	r30, 0x01	; 1
 22c:	20 83       	st	Z, r18
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	23 e2       	ldi	r18, 0x23	; 35
 232:	20 83       	st	Z, r18
 234:	31 97       	sbiw	r30, 0x01	; 1
 236:	40 83       	st	Z, r20
 238:	31 97       	sbiw	r30, 0x01	; 1
 23a:	50 83       	st	Z, r21
 23c:	31 97       	sbiw	r30, 0x01	; 1
 23e:	26 e2       	ldi	r18, 0x26	; 38
 240:	20 83       	st	Z, r18
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	27 e2       	ldi	r18, 0x27	; 39
 246:	20 83       	st	Z, r18
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	28 e2       	ldi	r18, 0x28	; 40
 24c:	20 83       	st	Z, r18
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	29 e2       	ldi	r18, 0x29	; 41
 252:	20 83       	st	Z, r18
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	20 e3       	ldi	r18, 0x30	; 48
 258:	20 83       	st	Z, r18
 25a:	31 97       	sbiw	r30, 0x01	; 1
 25c:	21 e3       	ldi	r18, 0x31	; 49
 25e:	20 83       	st	Z, r18
 260:	86 97       	sbiw	r24, 0x26	; 38
 262:	08 95       	ret

00000264 <xPortStartScheduler>:
 264:	0e 94 bd 00 	call	0x17a	; 0x17a <prvSetupTimerInterrupt>
 268:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <pxCurrentTCB>
 26c:	b0 91 ad 06 	lds	r27, 0x06AD	; 0x8006ad <pxCurrentTCB+0x1>
 270:	cd 91       	ld	r28, X+
 272:	cd bf       	out	0x3d, r28	; 61
 274:	dd 91       	ld	r29, X+
 276:	de bf       	out	0x3e, r29	; 62
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	bf 91       	pop	r27
 282:	af 91       	pop	r26
 284:	9f 91       	pop	r25
 286:	8f 91       	pop	r24
 288:	7f 91       	pop	r23
 28a:	6f 91       	pop	r22
 28c:	5f 91       	pop	r21
 28e:	4f 91       	pop	r20
 290:	3f 91       	pop	r19
 292:	2f 91       	pop	r18
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	df 90       	pop	r13
 29e:	cf 90       	pop	r12
 2a0:	bf 90       	pop	r11
 2a2:	af 90       	pop	r10
 2a4:	9f 90       	pop	r9
 2a6:	8f 90       	pop	r8
 2a8:	7f 90       	pop	r7
 2aa:	6f 90       	pop	r6
 2ac:	5f 90       	pop	r5
 2ae:	4f 90       	pop	r4
 2b0:	3f 90       	pop	r3
 2b2:	2f 90       	pop	r2
 2b4:	1f 90       	pop	r1
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	08 95       	ret
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	08 95       	ret

000002c2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	0f 92       	push	r0
 2ca:	1f 92       	push	r1
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 92       	push	r2
 2d0:	3f 92       	push	r3
 2d2:	4f 92       	push	r4
 2d4:	5f 92       	push	r5
 2d6:	6f 92       	push	r6
 2d8:	7f 92       	push	r7
 2da:	8f 92       	push	r8
 2dc:	9f 92       	push	r9
 2de:	af 92       	push	r10
 2e0:	bf 92       	push	r11
 2e2:	cf 92       	push	r12
 2e4:	df 92       	push	r13
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	2f 93       	push	r18
 2f0:	3f 93       	push	r19
 2f2:	4f 93       	push	r20
 2f4:	5f 93       	push	r21
 2f6:	6f 93       	push	r22
 2f8:	7f 93       	push	r23
 2fa:	8f 93       	push	r24
 2fc:	9f 93       	push	r25
 2fe:	af 93       	push	r26
 300:	bf 93       	push	r27
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <pxCurrentTCB>
 30e:	b0 91 ad 06 	lds	r27, 0x06AD	; 0x8006ad <pxCurrentTCB+0x1>
 312:	0d b6       	in	r0, 0x3d	; 61
 314:	0d 92       	st	X+, r0
 316:	0e b6       	in	r0, 0x3e	; 62
 318:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 31a:	0e 94 14 06 	call	0xc28	; 0xc28 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 31e:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <pxCurrentTCB>
 322:	b0 91 ad 06 	lds	r27, 0x06AD	; 0x8006ad <pxCurrentTCB+0x1>
 326:	cd 91       	ld	r28, X+
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	dd 91       	ld	r29, X+
 32c:	de bf       	out	0x3e, r29	; 62
 32e:	ff 91       	pop	r31
 330:	ef 91       	pop	r30
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	ff 90       	pop	r15
 350:	ef 90       	pop	r14
 352:	df 90       	pop	r13
 354:	cf 90       	pop	r12
 356:	bf 90       	pop	r11
 358:	af 90       	pop	r10
 35a:	9f 90       	pop	r9
 35c:	8f 90       	pop	r8
 35e:	7f 90       	pop	r7
 360:	6f 90       	pop	r6
 362:	5f 90       	pop	r5
 364:	4f 90       	pop	r4
 366:	3f 90       	pop	r3
 368:	2f 90       	pop	r2
 36a:	1f 90       	pop	r1
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0

	asm volatile ( "ret" );
 372:	08 95       	ret

00000374 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	0f 92       	push	r0
 37c:	1f 92       	push	r1
 37e:	11 24       	eor	r1, r1
 380:	2f 92       	push	r2
 382:	3f 92       	push	r3
 384:	4f 92       	push	r4
 386:	5f 92       	push	r5
 388:	6f 92       	push	r6
 38a:	7f 92       	push	r7
 38c:	8f 92       	push	r8
 38e:	9f 92       	push	r9
 390:	af 92       	push	r10
 392:	bf 92       	push	r11
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	ef 93       	push	r30
 3ba:	ff 93       	push	r31
 3bc:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <pxCurrentTCB>
 3c0:	b0 91 ad 06 	lds	r27, 0x06AD	; 0x8006ad <pxCurrentTCB+0x1>
 3c4:	0d b6       	in	r0, 0x3d	; 61
 3c6:	0d 92       	st	X+, r0
 3c8:	0e b6       	in	r0, 0x3e	; 62
 3ca:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
 3cc:	0e 94 25 04 	call	0x84a	; 0x84a <xTaskIncrementTick>
 3d0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
 3d2:	0e 94 14 06 	call	0xc28	; 0xc28 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
 3d6:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <pxCurrentTCB>
 3da:	b0 91 ad 06 	lds	r27, 0x06AD	; 0x8006ad <pxCurrentTCB+0x1>
 3de:	cd 91       	ld	r28, X+
 3e0:	cd bf       	out	0x3d, r28	; 61
 3e2:	dd 91       	ld	r29, X+
 3e4:	de bf       	out	0x3e, r29	; 62
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	7f 91       	pop	r23
 3f8:	6f 91       	pop	r22
 3fa:	5f 91       	pop	r21
 3fc:	4f 91       	pop	r20
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	ff 90       	pop	r15
 408:	ef 90       	pop	r14
 40a:	df 90       	pop	r13
 40c:	cf 90       	pop	r12
 40e:	bf 90       	pop	r11
 410:	af 90       	pop	r10
 412:	9f 90       	pop	r9
 414:	8f 90       	pop	r8
 416:	7f 90       	pop	r7
 418:	6f 90       	pop	r6
 41a:	5f 90       	pop	r5
 41c:	4f 90       	pop	r4
 41e:	3f 90       	pop	r3
 420:	2f 90       	pop	r2
 422:	1f 90       	pop	r1
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0

	asm volatile ( "ret" );
 42a:	08 95       	ret

0000042c <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
 42c:	0e 94 ba 01 	call	0x374	; 0x374 <vPortYieldFromTick>
		asm volatile ( "reti" );
 430:	18 95       	reti

00000432 <prvResetNextTaskUnblockTime>:
    vTaskSuspendAll();
    xPendedTicks += xTicksToCatchUp;
    xYieldOccurred = xTaskResumeAll();

    return xYieldOccurred;
}
 432:	e0 91 74 06 	lds	r30, 0x0674	; 0x800674 <pxDelayedTaskList>
 436:	f0 91 75 06 	lds	r31, 0x0675	; 0x800675 <pxDelayedTaskList+0x1>
 43a:	80 81       	ld	r24, Z
 43c:	81 11       	cpse	r24, r1
 43e:	07 c0       	rjmp	.+14     	; 0x44e <prvResetNextTaskUnblockTime+0x1c>
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	9f ef       	ldi	r25, 0xFF	; 255
 444:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <xNextTaskUnblockTime+0x1>
 448:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <xNextTaskUnblockTime>
 44c:	08 95       	ret
 44e:	e0 91 74 06 	lds	r30, 0x0674	; 0x800674 <pxDelayedTaskList>
 452:	f0 91 75 06 	lds	r31, 0x0675	; 0x800675 <pxDelayedTaskList+0x1>
 456:	05 80       	ldd	r0, Z+5	; 0x05
 458:	f6 81       	ldd	r31, Z+6	; 0x06
 45a:	e0 2d       	mov	r30, r0
 45c:	80 81       	ld	r24, Z
 45e:	91 81       	ldd	r25, Z+1	; 0x01
 460:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <xNextTaskUnblockTime+0x1>
 464:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <xNextTaskUnblockTime>
 468:	08 95       	ret

0000046a <prvDeleteTCB>:
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	ec 01       	movw	r28, r24
 470:	8f 89       	ldd	r24, Y+23	; 0x17
 472:	98 8d       	ldd	r25, Y+24	; 0x18
 474:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
 478:	ce 01       	movw	r24, r28
 47a:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <prvInitialiseNewTask>:
 484:	6f 92       	push	r6
 486:	7f 92       	push	r7
 488:	8f 92       	push	r8
 48a:	9f 92       	push	r9
 48c:	af 92       	push	r10
 48e:	bf 92       	push	r11
 490:	cf 92       	push	r12
 492:	df 92       	push	r13
 494:	ef 92       	push	r14
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	4c 01       	movw	r8, r24
 4a4:	d5 01       	movw	r26, r10
 4a6:	57 96       	adiw	r26, 0x17	; 23
 4a8:	8d 91       	ld	r24, X+
 4aa:	9c 91       	ld	r25, X
 4ac:	58 97       	sbiw	r26, 0x18	; 24
 4ae:	21 50       	subi	r18, 0x01	; 1
 4b0:	31 09       	sbc	r19, r1
 4b2:	3c 01       	movw	r6, r24
 4b4:	62 0e       	add	r6, r18
 4b6:	73 1e       	adc	r7, r19
 4b8:	61 15       	cp	r22, r1
 4ba:	71 05       	cpc	r23, r1
 4bc:	89 f4       	brne	.+34     	; 0x4e0 <prvInitialiseNewTask+0x5c>
 4be:	16 c0       	rjmp	.+44     	; 0x4ec <prvInitialiseNewTask+0x68>
 4c0:	82 2f       	mov	r24, r18
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	fb 01       	movw	r30, r22
 4c6:	e8 0f       	add	r30, r24
 4c8:	f9 1f       	adc	r31, r25
 4ca:	30 81       	ld	r19, Z
 4cc:	d5 01       	movw	r26, r10
 4ce:	a8 0f       	add	r26, r24
 4d0:	b9 1f       	adc	r27, r25
 4d2:	59 96       	adiw	r26, 0x19	; 25
 4d4:	3c 93       	st	X, r19
 4d6:	80 81       	ld	r24, Z
 4d8:	88 23       	and	r24, r24
 4da:	29 f0       	breq	.+10     	; 0x4e6 <prvInitialiseNewTask+0x62>
 4dc:	2f 5f       	subi	r18, 0xFF	; 255
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <prvInitialiseNewTask+0x5e>
 4e0:	20 e0       	ldi	r18, 0x00	; 0
 4e2:	28 30       	cpi	r18, 0x08	; 8
 4e4:	68 f3       	brcs	.-38     	; 0x4c0 <prvInitialiseNewTask+0x3c>
 4e6:	f5 01       	movw	r30, r10
 4e8:	10 a2       	std	Z+32, r1	; 0x20
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <prvInitialiseNewTask+0x6e>
 4ec:	d5 01       	movw	r26, r10
 4ee:	59 96       	adiw	r26, 0x19	; 25
 4f0:	1c 92       	st	X, r1
 4f2:	b3 e0       	ldi	r27, 0x03	; 3
 4f4:	be 15       	cp	r27, r14
 4f6:	20 f4       	brcc	.+8      	; 0x500 <prvInitialiseNewTask+0x7c>
 4f8:	0f 2e       	mov	r0, r31
 4fa:	f3 e0       	ldi	r31, 0x03	; 3
 4fc:	ef 2e       	mov	r14, r31
 4fe:	f0 2d       	mov	r31, r0
 500:	f5 01       	movw	r30, r10
 502:	e6 8a       	std	Z+22, r14	; 0x16
 504:	c5 01       	movw	r24, r10
 506:	02 96       	adiw	r24, 0x02	; 2
 508:	0e 94 92 00 	call	0x124	; 0x124 <vListInitialiseItem>
 50c:	c5 01       	movw	r24, r10
 50e:	0c 96       	adiw	r24, 0x0c	; 12
 510:	0e 94 92 00 	call	0x124	; 0x124 <vListInitialiseItem>
 514:	d5 01       	movw	r26, r10
 516:	19 96       	adiw	r26, 0x09	; 9
 518:	bc 92       	st	X, r11
 51a:	ae 92       	st	-X, r10
 51c:	18 97       	sbiw	r26, 0x08	; 8
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	8e 19       	sub	r24, r14
 524:	91 09       	sbc	r25, r1
 526:	1d 96       	adiw	r26, 0x0d	; 13
 528:	9c 93       	st	X, r25
 52a:	8e 93       	st	-X, r24
 52c:	1c 97       	sbiw	r26, 0x0c	; 12
 52e:	53 96       	adiw	r26, 0x13	; 19
 530:	bc 92       	st	X, r11
 532:	ae 92       	st	-X, r10
 534:	52 97       	sbiw	r26, 0x12	; 18
 536:	84 e0       	ldi	r24, 0x04	; 4
 538:	f5 01       	movw	r30, r10
 53a:	b1 96       	adiw	r30, 0x21	; 33
 53c:	df 01       	movw	r26, r30
 53e:	1d 92       	st	X+, r1
 540:	8a 95       	dec	r24
 542:	e9 f7       	brne	.-6      	; 0x53e <prvInitialiseNewTask+0xba>
 544:	f5 01       	movw	r30, r10
 546:	15 a2       	std	Z+37, r1	; 0x25
 548:	a8 01       	movw	r20, r16
 54a:	b4 01       	movw	r22, r8
 54c:	c3 01       	movw	r24, r6
 54e:	0e 94 c6 00 	call	0x18c	; 0x18c <pxPortInitialiseStack>
 552:	d5 01       	movw	r26, r10
 554:	8d 93       	st	X+, r24
 556:	9c 93       	st	X, r25
 558:	c1 14       	cp	r12, r1
 55a:	d1 04       	cpc	r13, r1
 55c:	19 f0       	breq	.+6      	; 0x564 <prvInitialiseNewTask+0xe0>
 55e:	f6 01       	movw	r30, r12
 560:	b1 82       	std	Z+1, r11	; 0x01
 562:	a0 82       	st	Z, r10
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ef 90       	pop	r14
 56e:	df 90       	pop	r13
 570:	cf 90       	pop	r12
 572:	bf 90       	pop	r11
 574:	af 90       	pop	r10
 576:	9f 90       	pop	r9
 578:	8f 90       	pop	r8
 57a:	7f 90       	pop	r7
 57c:	6f 90       	pop	r6
 57e:	08 95       	ret

00000580 <prvInitialiseTaskLists>:
 580:	cf 93       	push	r28
 582:	c0 e0       	ldi	r28, 0x00	; 0
 584:	10 c0       	rjmp	.+32     	; 0x5a6 <prvInitialiseTaskLists+0x26>
 586:	8c 2f       	mov	r24, r28
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	9c 01       	movw	r18, r24
 58c:	22 0f       	add	r18, r18
 58e:	33 1f       	adc	r19, r19
 590:	22 0f       	add	r18, r18
 592:	33 1f       	adc	r19, r19
 594:	22 0f       	add	r18, r18
 596:	33 1f       	adc	r19, r19
 598:	82 0f       	add	r24, r18
 59a:	93 1f       	adc	r25, r19
 59c:	88 57       	subi	r24, 0x78	; 120
 59e:	99 4f       	sbci	r25, 0xF9	; 249
 5a0:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 5a4:	cf 5f       	subi	r28, 0xFF	; 255
 5a6:	c4 30       	cpi	r28, 0x04	; 4
 5a8:	70 f3       	brcs	.-36     	; 0x586 <prvInitialiseTaskLists+0x6>
 5aa:	8f e7       	ldi	r24, 0x7F	; 127
 5ac:	96 e0       	ldi	r25, 0x06	; 6
 5ae:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 5b2:	86 e7       	ldi	r24, 0x76	; 118
 5b4:	96 e0       	ldi	r25, 0x06	; 6
 5b6:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 5ba:	89 e6       	ldi	r24, 0x69	; 105
 5bc:	96 e0       	ldi	r25, 0x06	; 6
 5be:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 5c2:	80 e6       	ldi	r24, 0x60	; 96
 5c4:	96 e0       	ldi	r25, 0x06	; 6
 5c6:	0e 94 84 00 	call	0x108	; 0x108 <vListInitialise>
 5ca:	8f e7       	ldi	r24, 0x7F	; 127
 5cc:	96 e0       	ldi	r25, 0x06	; 6
 5ce:	90 93 75 06 	sts	0x0675, r25	; 0x800675 <pxDelayedTaskList+0x1>
 5d2:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <pxDelayedTaskList>
 5d6:	86 e7       	ldi	r24, 0x76	; 118
 5d8:	96 e0       	ldi	r25, 0x06	; 6
 5da:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <pxOverflowDelayedTaskList+0x1>
 5de:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <pxOverflowDelayedTaskList>
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <prvAddNewTaskToReadyList>:
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	ec 01       	movw	r28, r24
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	f8 94       	cli
 5f0:	0f 92       	push	r0
 5f2:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <uxCurrentNumberOfTasks>
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
 5f8:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <uxCurrentNumberOfTasks>
 5fc:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <pxCurrentTCB>
 600:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <pxCurrentTCB+0x1>
 604:	89 2b       	or	r24, r25
 606:	59 f4       	brne	.+22     	; 0x61e <prvAddNewTaskToReadyList+0x38>
 608:	d0 93 ad 06 	sts	0x06AD, r29	; 0x8006ad <pxCurrentTCB+0x1>
 60c:	c0 93 ac 06 	sts	0x06AC, r28	; 0x8006ac <pxCurrentTCB>
 610:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <uxCurrentNumberOfTasks>
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	99 f4       	brne	.+38     	; 0x63e <prvAddNewTaskToReadyList+0x58>
 618:	0e 94 c0 02 	call	0x580	; 0x580 <prvInitialiseTaskLists>
 61c:	10 c0       	rjmp	.+32     	; 0x63e <prvAddNewTaskToReadyList+0x58>
 61e:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <xSchedulerRunning>
 622:	81 11       	cpse	r24, r1
 624:	0c c0       	rjmp	.+24     	; 0x63e <prvAddNewTaskToReadyList+0x58>
 626:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <pxCurrentTCB>
 62a:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <pxCurrentTCB+0x1>
 62e:	96 89       	ldd	r25, Z+22	; 0x16
 630:	8e 89       	ldd	r24, Y+22	; 0x16
 632:	89 17       	cp	r24, r25
 634:	20 f0       	brcs	.+8      	; 0x63e <prvAddNewTaskToReadyList+0x58>
 636:	d0 93 ad 06 	sts	0x06AD, r29	; 0x8006ad <pxCurrentTCB+0x1>
 63a:	c0 93 ac 06 	sts	0x06AC, r28	; 0x8006ac <pxCurrentTCB>
 63e:	80 91 55 06 	lds	r24, 0x0655	; 0x800655 <uxTaskNumber>
 642:	8f 5f       	subi	r24, 0xFF	; 255
 644:	80 93 55 06 	sts	0x0655, r24	; 0x800655 <uxTaskNumber>
 648:	8e 89       	ldd	r24, Y+22	; 0x16
 64a:	90 91 5b 06 	lds	r25, 0x065B	; 0x80065b <uxTopReadyPriority>
 64e:	98 17       	cp	r25, r24
 650:	10 f4       	brcc	.+4      	; 0x656 <prvAddNewTaskToReadyList+0x70>
 652:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <uxTopReadyPriority>
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	fc 01       	movw	r30, r24
 65a:	ee 0f       	add	r30, r30
 65c:	ff 1f       	adc	r31, r31
 65e:	ee 0f       	add	r30, r30
 660:	ff 1f       	adc	r31, r31
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	8e 0f       	add	r24, r30
 668:	9f 1f       	adc	r25, r31
 66a:	fc 01       	movw	r30, r24
 66c:	e8 57       	subi	r30, 0x78	; 120
 66e:	f9 4f       	sbci	r31, 0xF9	; 249
 670:	01 80       	ldd	r0, Z+1	; 0x01
 672:	f2 81       	ldd	r31, Z+2	; 0x02
 674:	e0 2d       	mov	r30, r0
 676:	fd 83       	std	Y+5, r31	; 0x05
 678:	ec 83       	std	Y+4, r30	; 0x04
 67a:	84 81       	ldd	r24, Z+4	; 0x04
 67c:	95 81       	ldd	r25, Z+5	; 0x05
 67e:	9f 83       	std	Y+7, r25	; 0x07
 680:	8e 83       	std	Y+6, r24	; 0x06
 682:	a4 81       	ldd	r26, Z+4	; 0x04
 684:	b5 81       	ldd	r27, Z+5	; 0x05
 686:	ce 01       	movw	r24, r28
 688:	02 96       	adiw	r24, 0x02	; 2
 68a:	13 96       	adiw	r26, 0x03	; 3
 68c:	9c 93       	st	X, r25
 68e:	8e 93       	st	-X, r24
 690:	12 97       	sbiw	r26, 0x02	; 2
 692:	95 83       	std	Z+5, r25	; 0x05
 694:	84 83       	std	Z+4, r24	; 0x04
 696:	ee 89       	ldd	r30, Y+22	; 0x16
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	cf 01       	movw	r24, r30
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	88 0f       	add	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	e8 0f       	add	r30, r24
 6aa:	f9 1f       	adc	r31, r25
 6ac:	e8 57       	subi	r30, 0x78	; 120
 6ae:	f9 4f       	sbci	r31, 0xF9	; 249
 6b0:	fb 87       	std	Y+11, r31	; 0x0b
 6b2:	ea 87       	std	Y+10, r30	; 0x0a
 6b4:	80 81       	ld	r24, Z
 6b6:	8f 5f       	subi	r24, 0xFF	; 255
 6b8:	80 83       	st	Z, r24
 6ba:	0f 90       	pop	r0
 6bc:	0f be       	out	0x3f, r0	; 63
 6be:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <xSchedulerRunning>
 6c2:	88 23       	and	r24, r24
 6c4:	51 f0       	breq	.+20     	; 0x6da <prvAddNewTaskToReadyList+0xf4>
 6c6:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <pxCurrentTCB>
 6ca:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <pxCurrentTCB+0x1>
 6ce:	96 89       	ldd	r25, Z+22	; 0x16
 6d0:	8e 89       	ldd	r24, Y+22	; 0x16
 6d2:	98 17       	cp	r25, r24
 6d4:	10 f4       	brcc	.+4      	; 0x6da <prvAddNewTaskToReadyList+0xf4>
 6d6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <vPortYield>
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <prvCheckTasksWaitingTermination>:
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	1c c0       	rjmp	.+56     	; 0x71e <prvCheckTasksWaitingTermination+0x3e>
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	f8 94       	cli
 6ea:	0f 92       	push	r0
 6ec:	e0 91 65 06 	lds	r30, 0x0665	; 0x800665 <xTasksWaitingTermination+0x5>
 6f0:	f0 91 66 06 	lds	r31, 0x0666	; 0x800666 <xTasksWaitingTermination+0x6>
 6f4:	c6 81       	ldd	r28, Z+6	; 0x06
 6f6:	d7 81       	ldd	r29, Z+7	; 0x07
 6f8:	ce 01       	movw	r24, r28
 6fa:	02 96       	adiw	r24, 0x02	; 2
 6fc:	0e 94 96 00 	call	0x12c	; 0x12c <uxListRemove>
 700:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <uxCurrentNumberOfTasks>
 704:	81 50       	subi	r24, 0x01	; 1
 706:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <uxCurrentNumberOfTasks>
 70a:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <uxDeletedTasksWaitingCleanUp>
 70e:	81 50       	subi	r24, 0x01	; 1
 710:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <uxDeletedTasksWaitingCleanUp>
 714:	0f 90       	pop	r0
 716:	0f be       	out	0x3f, r0	; 63
 718:	ce 01       	movw	r24, r28
 71a:	0e 94 35 02 	call	0x46a	; 0x46a <prvDeleteTCB>
 71e:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <uxDeletedTasksWaitingCleanUp>
 722:	81 11       	cpse	r24, r1
 724:	e0 cf       	rjmp	.-64     	; 0x6e6 <prvCheckTasksWaitingTermination+0x6>
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	08 95       	ret

0000072c <prvIdleTask>:
 72c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <prvCheckTasksWaitingTermination>
 730:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <pxReadyTasksLists>
 734:	82 30       	cpi	r24, 0x02	; 2
 736:	d0 f3       	brcs	.-12     	; 0x72c <prvIdleTask>
 738:	0e 94 61 01 	call	0x2c2	; 0x2c2 <vPortYield>
 73c:	f7 cf       	rjmp	.-18     	; 0x72c <prvIdleTask>

0000073e <xTaskCreate>:
 73e:	2f 92       	push	r2
 740:	3f 92       	push	r3
 742:	4f 92       	push	r4
 744:	5f 92       	push	r5
 746:	6f 92       	push	r6
 748:	7f 92       	push	r7
 74a:	8f 92       	push	r8
 74c:	9f 92       	push	r9
 74e:	af 92       	push	r10
 750:	bf 92       	push	r11
 752:	cf 92       	push	r12
 754:	df 92       	push	r13
 756:	ef 92       	push	r14
 758:	ff 92       	push	r15
 75a:	0f 93       	push	r16
 75c:	1f 93       	push	r17
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	3c 01       	movw	r6, r24
 764:	1b 01       	movw	r2, r22
 766:	5a 01       	movw	r10, r20
 768:	29 01       	movw	r4, r18
 76a:	ca 01       	movw	r24, r20
 76c:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
 770:	6c 01       	movw	r12, r24
 772:	89 2b       	or	r24, r25
 774:	71 f0       	breq	.+28     	; 0x792 <xTaskCreate+0x54>
 776:	86 e2       	ldi	r24, 0x26	; 38
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
 77e:	ec 01       	movw	r28, r24
 780:	89 2b       	or	r24, r25
 782:	19 f0       	breq	.+6      	; 0x78a <xTaskCreate+0x4c>
 784:	d8 8e       	std	Y+24, r13	; 0x18
 786:	cf 8a       	std	Y+23, r12	; 0x17
 788:	06 c0       	rjmp	.+12     	; 0x796 <xTaskCreate+0x58>
 78a:	c6 01       	movw	r24, r12
 78c:	0e 94 83 00 	call	0x106	; 0x106 <vPortFree>
 790:	02 c0       	rjmp	.+4      	; 0x796 <xTaskCreate+0x58>
 792:	c0 e0       	ldi	r28, 0x00	; 0
 794:	d0 e0       	ldi	r29, 0x00	; 0
 796:	20 97       	sbiw	r28, 0x00	; 0
 798:	91 f0       	breq	.+36     	; 0x7be <xTaskCreate+0x80>
 79a:	95 01       	movw	r18, r10
 79c:	40 e0       	ldi	r20, 0x00	; 0
 79e:	50 e0       	ldi	r21, 0x00	; 0
 7a0:	81 2c       	mov	r8, r1
 7a2:	91 2c       	mov	r9, r1
 7a4:	5e 01       	movw	r10, r28
 7a6:	67 01       	movw	r12, r14
 7a8:	e0 2e       	mov	r14, r16
 7aa:	82 01       	movw	r16, r4
 7ac:	b1 01       	movw	r22, r2
 7ae:	c3 01       	movw	r24, r6
 7b0:	0e 94 42 02 	call	0x484	; 0x484 <prvInitialiseNewTask>
 7b4:	ce 01       	movw	r24, r28
 7b6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <prvAddNewTaskToReadyList>
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <xTaskCreate+0x82>
 7be:	8f ef       	ldi	r24, 0xFF	; 255
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	ff 90       	pop	r15
 7ca:	ef 90       	pop	r14
 7cc:	df 90       	pop	r13
 7ce:	cf 90       	pop	r12
 7d0:	bf 90       	pop	r11
 7d2:	af 90       	pop	r10
 7d4:	9f 90       	pop	r9
 7d6:	8f 90       	pop	r8
 7d8:	7f 90       	pop	r7
 7da:	6f 90       	pop	r6
 7dc:	5f 90       	pop	r5
 7de:	4f 90       	pop	r4
 7e0:	3f 90       	pop	r3
 7e2:	2f 90       	pop	r2
 7e4:	08 95       	ret

000007e6 <vTaskStartScheduler>:
 7e6:	ef 92       	push	r14
 7e8:	ff 92       	push	r15
 7ea:	0f 93       	push	r16
 7ec:	0f 2e       	mov	r0, r31
 7ee:	f1 e5       	ldi	r31, 0x51	; 81
 7f0:	ef 2e       	mov	r14, r31
 7f2:	f6 e0       	ldi	r31, 0x06	; 6
 7f4:	ff 2e       	mov	r15, r31
 7f6:	f0 2d       	mov	r31, r0
 7f8:	00 e0       	ldi	r16, 0x00	; 0
 7fa:	20 e0       	ldi	r18, 0x00	; 0
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	45 e5       	ldi	r20, 0x55	; 85
 800:	50 e0       	ldi	r21, 0x00	; 0
 802:	61 e6       	ldi	r22, 0x61	; 97
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	86 e9       	ldi	r24, 0x96	; 150
 808:	93 e0       	ldi	r25, 0x03	; 3
 80a:	0e 94 9f 03 	call	0x73e	; 0x73e <xTaskCreate>
 80e:	81 30       	cpi	r24, 0x01	; 1
 810:	81 f4       	brne	.+32     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 812:	f8 94       	cli
 814:	8f ef       	ldi	r24, 0xFF	; 255
 816:	9f ef       	ldi	r25, 0xFF	; 255
 818:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <xNextTaskUnblockTime+0x1>
 81c:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <xNextTaskUnblockTime>
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <xSchedulerRunning>
 826:	10 92 5d 06 	sts	0x065D, r1	; 0x80065d <xTickCount+0x1>
 82a:	10 92 5c 06 	sts	0x065C, r1	; 0x80065c <xTickCount>
 82e:	0e 94 32 01 	call	0x264	; 0x264 <xPortStartScheduler>
 832:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 836:	0f 91       	pop	r16
 838:	ff 90       	pop	r15
 83a:	ef 90       	pop	r14
 83c:	08 95       	ret

0000083e <vTaskSuspendAll>:
 83e:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <uxSchedulerSuspended>
 842:	8f 5f       	subi	r24, 0xFF	; 255
 844:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <uxSchedulerSuspended>
 848:	08 95       	ret

0000084a <xTaskIncrementTick>:
 84a:	0f 93       	push	r16
 84c:	1f 93       	push	r17
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <uxSchedulerSuspended>
 856:	81 11       	cpse	r24, r1
 858:	01 c1       	rjmp	.+514    	; 0xa5c <__stack+0x1fd>
 85a:	c0 91 5c 06 	lds	r28, 0x065C	; 0x80065c <xTickCount>
 85e:	d0 91 5d 06 	lds	r29, 0x065D	; 0x80065d <xTickCount+0x1>
 862:	8e 01       	movw	r16, r28
 864:	0f 5f       	subi	r16, 0xFF	; 255
 866:	1f 4f       	sbci	r17, 0xFF	; 255
 868:	10 93 5d 06 	sts	0x065D, r17	; 0x80065d <xTickCount+0x1>
 86c:	00 93 5c 06 	sts	0x065C, r16	; 0x80065c <xTickCount>
 870:	01 15       	cp	r16, r1
 872:	11 05       	cpc	r17, r1
 874:	b9 f4       	brne	.+46     	; 0x8a4 <__stack+0x45>
 876:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <pxDelayedTaskList>
 87a:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <pxDelayedTaskList+0x1>
 87e:	20 91 72 06 	lds	r18, 0x0672	; 0x800672 <pxOverflowDelayedTaskList>
 882:	30 91 73 06 	lds	r19, 0x0673	; 0x800673 <pxOverflowDelayedTaskList+0x1>
 886:	30 93 75 06 	sts	0x0675, r19	; 0x800675 <pxDelayedTaskList+0x1>
 88a:	20 93 74 06 	sts	0x0674, r18	; 0x800674 <pxDelayedTaskList>
 88e:	90 93 73 06 	sts	0x0673, r25	; 0x800673 <pxOverflowDelayedTaskList+0x1>
 892:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <pxOverflowDelayedTaskList>
 896:	80 91 56 06 	lds	r24, 0x0656	; 0x800656 <xNumOfOverflows>
 89a:	8f 5f       	subi	r24, 0xFF	; 255
 89c:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <xNumOfOverflows>
 8a0:	0e 94 19 02 	call	0x432	; 0x432 <prvResetNextTaskUnblockTime>
 8a4:	80 91 53 06 	lds	r24, 0x0653	; 0x800653 <xNextTaskUnblockTime>
 8a8:	90 91 54 06 	lds	r25, 0x0654	; 0x800654 <xNextTaskUnblockTime+0x1>
 8ac:	08 17       	cp	r16, r24
 8ae:	19 07       	cpc	r17, r25
 8b0:	20 f4       	brcc	.+8      	; 0x8ba <__stack+0x5b>
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	b8 c0       	rjmp	.+368    	; 0xa26 <__stack+0x1c7>
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	01 c0       	rjmp	.+2      	; 0x8bc <__stack+0x5d>
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	e0 91 74 06 	lds	r30, 0x0674	; 0x800674 <pxDelayedTaskList>
 8c0:	f0 91 75 06 	lds	r31, 0x0675	; 0x800675 <pxDelayedTaskList+0x1>
 8c4:	90 81       	ld	r25, Z
 8c6:	91 11       	cpse	r25, r1
 8c8:	07 c0       	rjmp	.+14     	; 0x8d8 <__stack+0x79>
 8ca:	2f ef       	ldi	r18, 0xFF	; 255
 8cc:	3f ef       	ldi	r19, 0xFF	; 255
 8ce:	30 93 54 06 	sts	0x0654, r19	; 0x800654 <xNextTaskUnblockTime+0x1>
 8d2:	20 93 53 06 	sts	0x0653, r18	; 0x800653 <xNextTaskUnblockTime>
 8d6:	a7 c0       	rjmp	.+334    	; 0xa26 <__stack+0x1c7>
 8d8:	e0 91 74 06 	lds	r30, 0x0674	; 0x800674 <pxDelayedTaskList>
 8dc:	f0 91 75 06 	lds	r31, 0x0675	; 0x800675 <pxDelayedTaskList+0x1>
 8e0:	05 80       	ldd	r0, Z+5	; 0x05
 8e2:	f6 81       	ldd	r31, Z+6	; 0x06
 8e4:	e0 2d       	mov	r30, r0
 8e6:	06 80       	ldd	r0, Z+6	; 0x06
 8e8:	f7 81       	ldd	r31, Z+7	; 0x07
 8ea:	e0 2d       	mov	r30, r0
 8ec:	22 81       	ldd	r18, Z+2	; 0x02
 8ee:	33 81       	ldd	r19, Z+3	; 0x03
 8f0:	02 17       	cp	r16, r18
 8f2:	13 07       	cpc	r17, r19
 8f4:	28 f4       	brcc	.+10     	; 0x900 <__stack+0xa1>
 8f6:	30 93 54 06 	sts	0x0654, r19	; 0x800654 <xNextTaskUnblockTime+0x1>
 8fa:	20 93 53 06 	sts	0x0653, r18	; 0x800653 <xNextTaskUnblockTime>
 8fe:	93 c0       	rjmp	.+294    	; 0xa26 <__stack+0x1c7>
 900:	a2 85       	ldd	r26, Z+10	; 0x0a
 902:	b3 85       	ldd	r27, Z+11	; 0x0b
 904:	24 81       	ldd	r18, Z+4	; 0x04
 906:	35 81       	ldd	r19, Z+5	; 0x05
 908:	46 81       	ldd	r20, Z+6	; 0x06
 90a:	57 81       	ldd	r21, Z+7	; 0x07
 90c:	e9 01       	movw	r28, r18
 90e:	5d 83       	std	Y+5, r21	; 0x05
 910:	4c 83       	std	Y+4, r20	; 0x04
 912:	26 81       	ldd	r18, Z+6	; 0x06
 914:	37 81       	ldd	r19, Z+7	; 0x07
 916:	44 81       	ldd	r20, Z+4	; 0x04
 918:	55 81       	ldd	r21, Z+5	; 0x05
 91a:	e9 01       	movw	r28, r18
 91c:	5b 83       	std	Y+3, r21	; 0x03
 91e:	4a 83       	std	Y+2, r20	; 0x02
 920:	11 96       	adiw	r26, 0x01	; 1
 922:	2d 91       	ld	r18, X+
 924:	3c 91       	ld	r19, X
 926:	12 97       	sbiw	r26, 0x02	; 2
 928:	af 01       	movw	r20, r30
 92a:	4e 5f       	subi	r20, 0xFE	; 254
 92c:	5f 4f       	sbci	r21, 0xFF	; 255
 92e:	24 17       	cp	r18, r20
 930:	35 07       	cpc	r19, r21
 932:	31 f4       	brne	.+12     	; 0x940 <__stack+0xe1>
 934:	26 81       	ldd	r18, Z+6	; 0x06
 936:	37 81       	ldd	r19, Z+7	; 0x07
 938:	12 96       	adiw	r26, 0x02	; 2
 93a:	3c 93       	st	X, r19
 93c:	2e 93       	st	-X, r18
 93e:	11 97       	sbiw	r26, 0x01	; 1
 940:	13 86       	std	Z+11, r1	; 0x0b
 942:	12 86       	std	Z+10, r1	; 0x0a
 944:	9c 91       	ld	r25, X
 946:	91 50       	subi	r25, 0x01	; 1
 948:	9c 93       	st	X, r25
 94a:	a4 89       	ldd	r26, Z+20	; 0x14
 94c:	b5 89       	ldd	r27, Z+21	; 0x15
 94e:	10 97       	sbiw	r26, 0x00	; 0
 950:	19 f1       	breq	.+70     	; 0x998 <__stack+0x139>
 952:	26 85       	ldd	r18, Z+14	; 0x0e
 954:	37 85       	ldd	r19, Z+15	; 0x0f
 956:	60 89       	ldd	r22, Z+16	; 0x10
 958:	71 89       	ldd	r23, Z+17	; 0x11
 95a:	e9 01       	movw	r28, r18
 95c:	7d 83       	std	Y+5, r23	; 0x05
 95e:	6c 83       	std	Y+4, r22	; 0x04
 960:	20 89       	ldd	r18, Z+16	; 0x10
 962:	31 89       	ldd	r19, Z+17	; 0x11
 964:	66 85       	ldd	r22, Z+14	; 0x0e
 966:	77 85       	ldd	r23, Z+15	; 0x0f
 968:	e9 01       	movw	r28, r18
 96a:	7b 83       	std	Y+3, r23	; 0x03
 96c:	6a 83       	std	Y+2, r22	; 0x02
 96e:	11 96       	adiw	r26, 0x01	; 1
 970:	6d 91       	ld	r22, X+
 972:	7c 91       	ld	r23, X
 974:	12 97       	sbiw	r26, 0x02	; 2
 976:	9f 01       	movw	r18, r30
 978:	24 5f       	subi	r18, 0xF4	; 244
 97a:	3f 4f       	sbci	r19, 0xFF	; 255
 97c:	62 17       	cp	r22, r18
 97e:	73 07       	cpc	r23, r19
 980:	31 f4       	brne	.+12     	; 0x98e <__stack+0x12f>
 982:	20 89       	ldd	r18, Z+16	; 0x10
 984:	31 89       	ldd	r19, Z+17	; 0x11
 986:	12 96       	adiw	r26, 0x02	; 2
 988:	3c 93       	st	X, r19
 98a:	2e 93       	st	-X, r18
 98c:	11 97       	sbiw	r26, 0x01	; 1
 98e:	15 8a       	std	Z+21, r1	; 0x15
 990:	14 8a       	std	Z+20, r1	; 0x14
 992:	9c 91       	ld	r25, X
 994:	91 50       	subi	r25, 0x01	; 1
 996:	9c 93       	st	X, r25
 998:	26 89       	ldd	r18, Z+22	; 0x16
 99a:	90 91 5b 06 	lds	r25, 0x065B	; 0x80065b <uxTopReadyPriority>
 99e:	92 17       	cp	r25, r18
 9a0:	10 f4       	brcc	.+4      	; 0x9a6 <__stack+0x147>
 9a2:	20 93 5b 06 	sts	0x065B, r18	; 0x80065b <uxTopReadyPriority>
 9a6:	30 e0       	ldi	r19, 0x00	; 0
 9a8:	d9 01       	movw	r26, r18
 9aa:	aa 0f       	add	r26, r26
 9ac:	bb 1f       	adc	r27, r27
 9ae:	aa 0f       	add	r26, r26
 9b0:	bb 1f       	adc	r27, r27
 9b2:	aa 0f       	add	r26, r26
 9b4:	bb 1f       	adc	r27, r27
 9b6:	2a 0f       	add	r18, r26
 9b8:	3b 1f       	adc	r19, r27
 9ba:	d9 01       	movw	r26, r18
 9bc:	a8 57       	subi	r26, 0x78	; 120
 9be:	b9 4f       	sbci	r27, 0xF9	; 249
 9c0:	11 96       	adiw	r26, 0x01	; 1
 9c2:	0d 90       	ld	r0, X+
 9c4:	bc 91       	ld	r27, X
 9c6:	a0 2d       	mov	r26, r0
 9c8:	b5 83       	std	Z+5, r27	; 0x05
 9ca:	a4 83       	std	Z+4, r26	; 0x04
 9cc:	14 96       	adiw	r26, 0x04	; 4
 9ce:	2d 91       	ld	r18, X+
 9d0:	3c 91       	ld	r19, X
 9d2:	15 97       	sbiw	r26, 0x05	; 5
 9d4:	37 83       	std	Z+7, r19	; 0x07
 9d6:	26 83       	std	Z+6, r18	; 0x06
 9d8:	14 96       	adiw	r26, 0x04	; 4
 9da:	2d 91       	ld	r18, X+
 9dc:	3c 91       	ld	r19, X
 9de:	15 97       	sbiw	r26, 0x05	; 5
 9e0:	e9 01       	movw	r28, r18
 9e2:	5b 83       	std	Y+3, r21	; 0x03
 9e4:	4a 83       	std	Y+2, r20	; 0x02
 9e6:	15 96       	adiw	r26, 0x05	; 5
 9e8:	5c 93       	st	X, r21
 9ea:	4e 93       	st	-X, r20
 9ec:	14 97       	sbiw	r26, 0x04	; 4
 9ee:	a6 89       	ldd	r26, Z+22	; 0x16
 9f0:	b0 e0       	ldi	r27, 0x00	; 0
 9f2:	9d 01       	movw	r18, r26
 9f4:	22 0f       	add	r18, r18
 9f6:	33 1f       	adc	r19, r19
 9f8:	22 0f       	add	r18, r18
 9fa:	33 1f       	adc	r19, r19
 9fc:	22 0f       	add	r18, r18
 9fe:	33 1f       	adc	r19, r19
 a00:	a2 0f       	add	r26, r18
 a02:	b3 1f       	adc	r27, r19
 a04:	a8 57       	subi	r26, 0x78	; 120
 a06:	b9 4f       	sbci	r27, 0xF9	; 249
 a08:	b3 87       	std	Z+11, r27	; 0x0b
 a0a:	a2 87       	std	Z+10, r26	; 0x0a
 a0c:	9c 91       	ld	r25, X
 a0e:	9f 5f       	subi	r25, 0xFF	; 255
 a10:	9c 93       	st	X, r25
 a12:	26 89       	ldd	r18, Z+22	; 0x16
 a14:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <pxCurrentTCB>
 a18:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <pxCurrentTCB+0x1>
 a1c:	96 89       	ldd	r25, Z+22	; 0x16
 a1e:	29 17       	cp	r18, r25
 a20:	08 f0       	brcs	.+2      	; 0xa24 <__stack+0x1c5>
 a22:	49 cf       	rjmp	.-366    	; 0x8b6 <__stack+0x57>
 a24:	4b cf       	rjmp	.-362    	; 0x8bc <__stack+0x5d>
 a26:	e0 91 ac 06 	lds	r30, 0x06AC	; 0x8006ac <pxCurrentTCB>
 a2a:	f0 91 ad 06 	lds	r31, 0x06AD	; 0x8006ad <pxCurrentTCB+0x1>
 a2e:	26 89       	ldd	r18, Z+22	; 0x16
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	f9 01       	movw	r30, r18
 a34:	ee 0f       	add	r30, r30
 a36:	ff 1f       	adc	r31, r31
 a38:	ee 0f       	add	r30, r30
 a3a:	ff 1f       	adc	r31, r31
 a3c:	ee 0f       	add	r30, r30
 a3e:	ff 1f       	adc	r31, r31
 a40:	2e 0f       	add	r18, r30
 a42:	3f 1f       	adc	r19, r31
 a44:	f9 01       	movw	r30, r18
 a46:	e8 57       	subi	r30, 0x78	; 120
 a48:	f9 4f       	sbci	r31, 0xF9	; 249
 a4a:	90 81       	ld	r25, Z
 a4c:	92 30       	cpi	r25, 0x02	; 2
 a4e:	08 f0       	brcs	.+2      	; 0xa52 <__stack+0x1f3>
 a50:	81 e0       	ldi	r24, 0x01	; 1
 a52:	90 91 57 06 	lds	r25, 0x0657	; 0x800657 <xYieldPending>
 a56:	91 11       	cpse	r25, r1
 a58:	0c c0       	rjmp	.+24     	; 0xa72 <__stack+0x213>
 a5a:	0c c0       	rjmp	.+24     	; 0xa74 <__stack+0x215>
 a5c:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <xPendedTicks>
 a60:	90 91 59 06 	lds	r25, 0x0659	; 0x800659 <xPendedTicks+0x1>
 a64:	01 96       	adiw	r24, 0x01	; 1
 a66:	90 93 59 06 	sts	0x0659, r25	; 0x800659 <xPendedTicks+0x1>
 a6a:	80 93 58 06 	sts	0x0658, r24	; 0x800658 <xPendedTicks>
 a6e:	80 e0       	ldi	r24, 0x00	; 0
 a70:	01 c0       	rjmp	.+2      	; 0xa74 <__stack+0x215>
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	df 91       	pop	r29
 a76:	cf 91       	pop	r28
 a78:	1f 91       	pop	r17
 a7a:	0f 91       	pop	r16
 a7c:	08 95       	ret

00000a7e <xTaskResumeAll>:
 a7e:	cf 93       	push	r28
 a80:	df 93       	push	r29
 a82:	0f b6       	in	r0, 0x3f	; 63
 a84:	f8 94       	cli
 a86:	0f 92       	push	r0
 a88:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <uxSchedulerSuspended>
 a8c:	81 50       	subi	r24, 0x01	; 1
 a8e:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <uxSchedulerSuspended>
 a92:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <uxSchedulerSuspended>
 a96:	81 11       	cpse	r24, r1
 a98:	bf c0       	rjmp	.+382    	; 0xc18 <xTaskResumeAll+0x19a>
 a9a:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <uxCurrentNumberOfTasks>
 a9e:	81 11       	cpse	r24, r1
 aa0:	96 c0       	rjmp	.+300    	; 0xbce <xTaskResumeAll+0x150>
 aa2:	bd c0       	rjmp	.+378    	; 0xc1e <xTaskResumeAll+0x1a0>
 aa4:	e0 91 6e 06 	lds	r30, 0x066E	; 0x80066e <xPendingReadyList+0x5>
 aa8:	f0 91 6f 06 	lds	r31, 0x066F	; 0x80066f <xPendingReadyList+0x6>
 aac:	06 80       	ldd	r0, Z+6	; 0x06
 aae:	f7 81       	ldd	r31, Z+7	; 0x07
 ab0:	e0 2d       	mov	r30, r0
 ab2:	a4 89       	ldd	r26, Z+20	; 0x14
 ab4:	b5 89       	ldd	r27, Z+21	; 0x15
 ab6:	c6 85       	ldd	r28, Z+14	; 0x0e
 ab8:	d7 85       	ldd	r29, Z+15	; 0x0f
 aba:	80 89       	ldd	r24, Z+16	; 0x10
 abc:	91 89       	ldd	r25, Z+17	; 0x11
 abe:	9d 83       	std	Y+5, r25	; 0x05
 ac0:	8c 83       	std	Y+4, r24	; 0x04
 ac2:	c0 89       	ldd	r28, Z+16	; 0x10
 ac4:	d1 89       	ldd	r29, Z+17	; 0x11
 ac6:	86 85       	ldd	r24, Z+14	; 0x0e
 ac8:	97 85       	ldd	r25, Z+15	; 0x0f
 aca:	9b 83       	std	Y+3, r25	; 0x03
 acc:	8a 83       	std	Y+2, r24	; 0x02
 ace:	11 96       	adiw	r26, 0x01	; 1
 ad0:	2d 91       	ld	r18, X+
 ad2:	3c 91       	ld	r19, X
 ad4:	12 97       	sbiw	r26, 0x02	; 2
 ad6:	cf 01       	movw	r24, r30
 ad8:	0c 96       	adiw	r24, 0x0c	; 12
 ada:	28 17       	cp	r18, r24
 adc:	39 07       	cpc	r19, r25
 ade:	31 f4       	brne	.+12     	; 0xaec <xTaskResumeAll+0x6e>
 ae0:	80 89       	ldd	r24, Z+16	; 0x10
 ae2:	91 89       	ldd	r25, Z+17	; 0x11
 ae4:	12 96       	adiw	r26, 0x02	; 2
 ae6:	9c 93       	st	X, r25
 ae8:	8e 93       	st	-X, r24
 aea:	11 97       	sbiw	r26, 0x01	; 1
 aec:	15 8a       	std	Z+21, r1	; 0x15
 aee:	14 8a       	std	Z+20, r1	; 0x14
 af0:	8c 91       	ld	r24, X
 af2:	81 50       	subi	r24, 0x01	; 1
 af4:	8c 93       	st	X, r24
 af6:	a2 85       	ldd	r26, Z+10	; 0x0a
 af8:	b3 85       	ldd	r27, Z+11	; 0x0b
 afa:	c4 81       	ldd	r28, Z+4	; 0x04
 afc:	d5 81       	ldd	r29, Z+5	; 0x05
 afe:	86 81       	ldd	r24, Z+6	; 0x06
 b00:	97 81       	ldd	r25, Z+7	; 0x07
 b02:	9d 83       	std	Y+5, r25	; 0x05
 b04:	8c 83       	std	Y+4, r24	; 0x04
 b06:	c6 81       	ldd	r28, Z+6	; 0x06
 b08:	d7 81       	ldd	r29, Z+7	; 0x07
 b0a:	84 81       	ldd	r24, Z+4	; 0x04
 b0c:	95 81       	ldd	r25, Z+5	; 0x05
 b0e:	9b 83       	std	Y+3, r25	; 0x03
 b10:	8a 83       	std	Y+2, r24	; 0x02
 b12:	11 96       	adiw	r26, 0x01	; 1
 b14:	8d 91       	ld	r24, X+
 b16:	9c 91       	ld	r25, X
 b18:	12 97       	sbiw	r26, 0x02	; 2
 b1a:	9f 01       	movw	r18, r30
 b1c:	2e 5f       	subi	r18, 0xFE	; 254
 b1e:	3f 4f       	sbci	r19, 0xFF	; 255
 b20:	82 17       	cp	r24, r18
 b22:	93 07       	cpc	r25, r19
 b24:	31 f4       	brne	.+12     	; 0xb32 <xTaskResumeAll+0xb4>
 b26:	86 81       	ldd	r24, Z+6	; 0x06
 b28:	97 81       	ldd	r25, Z+7	; 0x07
 b2a:	12 96       	adiw	r26, 0x02	; 2
 b2c:	9c 93       	st	X, r25
 b2e:	8e 93       	st	-X, r24
 b30:	11 97       	sbiw	r26, 0x01	; 1
 b32:	13 86       	std	Z+11, r1	; 0x0b
 b34:	12 86       	std	Z+10, r1	; 0x0a
 b36:	8c 91       	ld	r24, X
 b38:	81 50       	subi	r24, 0x01	; 1
 b3a:	8c 93       	st	X, r24
 b3c:	86 89       	ldd	r24, Z+22	; 0x16
 b3e:	90 91 5b 06 	lds	r25, 0x065B	; 0x80065b <uxTopReadyPriority>
 b42:	98 17       	cp	r25, r24
 b44:	10 f4       	brcc	.+4      	; 0xb4a <xTaskResumeAll+0xcc>
 b46:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <uxTopReadyPriority>
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	dc 01       	movw	r26, r24
 b4e:	aa 0f       	add	r26, r26
 b50:	bb 1f       	adc	r27, r27
 b52:	aa 0f       	add	r26, r26
 b54:	bb 1f       	adc	r27, r27
 b56:	aa 0f       	add	r26, r26
 b58:	bb 1f       	adc	r27, r27
 b5a:	8a 0f       	add	r24, r26
 b5c:	9b 1f       	adc	r25, r27
 b5e:	dc 01       	movw	r26, r24
 b60:	a8 57       	subi	r26, 0x78	; 120
 b62:	b9 4f       	sbci	r27, 0xF9	; 249
 b64:	11 96       	adiw	r26, 0x01	; 1
 b66:	0d 90       	ld	r0, X+
 b68:	bc 91       	ld	r27, X
 b6a:	a0 2d       	mov	r26, r0
 b6c:	b5 83       	std	Z+5, r27	; 0x05
 b6e:	a4 83       	std	Z+4, r26	; 0x04
 b70:	14 96       	adiw	r26, 0x04	; 4
 b72:	8d 91       	ld	r24, X+
 b74:	9c 91       	ld	r25, X
 b76:	15 97       	sbiw	r26, 0x05	; 5
 b78:	97 83       	std	Z+7, r25	; 0x07
 b7a:	86 83       	std	Z+6, r24	; 0x06
 b7c:	14 96       	adiw	r26, 0x04	; 4
 b7e:	cd 91       	ld	r28, X+
 b80:	dc 91       	ld	r29, X
 b82:	15 97       	sbiw	r26, 0x05	; 5
 b84:	3b 83       	std	Y+3, r19	; 0x03
 b86:	2a 83       	std	Y+2, r18	; 0x02
 b88:	15 96       	adiw	r26, 0x05	; 5
 b8a:	3c 93       	st	X, r19
 b8c:	2e 93       	st	-X, r18
 b8e:	14 97       	sbiw	r26, 0x04	; 4
 b90:	a6 89       	ldd	r26, Z+22	; 0x16
 b92:	b0 e0       	ldi	r27, 0x00	; 0
 b94:	cd 01       	movw	r24, r26
 b96:	88 0f       	add	r24, r24
 b98:	99 1f       	adc	r25, r25
 b9a:	88 0f       	add	r24, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	88 0f       	add	r24, r24
 ba0:	99 1f       	adc	r25, r25
 ba2:	a8 0f       	add	r26, r24
 ba4:	b9 1f       	adc	r27, r25
 ba6:	a8 57       	subi	r26, 0x78	; 120
 ba8:	b9 4f       	sbci	r27, 0xF9	; 249
 baa:	b3 87       	std	Z+11, r27	; 0x0b
 bac:	a2 87       	std	Z+10, r26	; 0x0a
 bae:	8c 91       	ld	r24, X
 bb0:	8f 5f       	subi	r24, 0xFF	; 255
 bb2:	8c 93       	st	X, r24
 bb4:	96 89       	ldd	r25, Z+22	; 0x16
 bb6:	a0 91 ac 06 	lds	r26, 0x06AC	; 0x8006ac <pxCurrentTCB>
 bba:	b0 91 ad 06 	lds	r27, 0x06AD	; 0x8006ad <pxCurrentTCB+0x1>
 bbe:	56 96       	adiw	r26, 0x16	; 22
 bc0:	8c 91       	ld	r24, X
 bc2:	98 17       	cp	r25, r24
 bc4:	30 f0       	brcs	.+12     	; 0xbd2 <xTaskResumeAll+0x154>
 bc6:	81 e0       	ldi	r24, 0x01	; 1
 bc8:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <xYieldPending>
 bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <xTaskResumeAll+0x154>
 bce:	e0 e0       	ldi	r30, 0x00	; 0
 bd0:	f0 e0       	ldi	r31, 0x00	; 0
 bd2:	80 91 69 06 	lds	r24, 0x0669	; 0x800669 <xPendingReadyList>
 bd6:	81 11       	cpse	r24, r1
 bd8:	65 cf       	rjmp	.-310    	; 0xaa4 <xTaskResumeAll+0x26>
 bda:	ef 2b       	or	r30, r31
 bdc:	11 f0       	breq	.+4      	; 0xbe2 <xTaskResumeAll+0x164>
 bde:	0e 94 19 02 	call	0x432	; 0x432 <prvResetNextTaskUnblockTime>
 be2:	c0 91 58 06 	lds	r28, 0x0658	; 0x800658 <xPendedTicks>
 be6:	d0 91 59 06 	lds	r29, 0x0659	; 0x800659 <xPendedTicks+0x1>
 bea:	20 97       	sbiw	r28, 0x00	; 0
 bec:	69 f0       	breq	.+26     	; 0xc08 <xTaskResumeAll+0x18a>
 bee:	0e 94 25 04 	call	0x84a	; 0x84a <xTaskIncrementTick>
 bf2:	88 23       	and	r24, r24
 bf4:	19 f0       	breq	.+6      	; 0xbfc <xTaskResumeAll+0x17e>
 bf6:	81 e0       	ldi	r24, 0x01	; 1
 bf8:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <xYieldPending>
 bfc:	21 97       	sbiw	r28, 0x01	; 1
 bfe:	b9 f7       	brne	.-18     	; 0xbee <xTaskResumeAll+0x170>
 c00:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <xPendedTicks+0x1>
 c04:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <xPendedTicks>
 c08:	80 91 57 06 	lds	r24, 0x0657	; 0x800657 <xYieldPending>
 c0c:	88 23       	and	r24, r24
 c0e:	31 f0       	breq	.+12     	; 0xc1c <xTaskResumeAll+0x19e>
 c10:	0e 94 61 01 	call	0x2c2	; 0x2c2 <vPortYield>
 c14:	81 e0       	ldi	r24, 0x01	; 1
 c16:	03 c0       	rjmp	.+6      	; 0xc1e <xTaskResumeAll+0x1a0>
 c18:	80 e0       	ldi	r24, 0x00	; 0
 c1a:	01 c0       	rjmp	.+2      	; 0xc1e <xTaskResumeAll+0x1a0>
 c1c:	80 e0       	ldi	r24, 0x00	; 0
 c1e:	0f 90       	pop	r0
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	df 91       	pop	r29
 c24:	cf 91       	pop	r28
 c26:	08 95       	ret

00000c28 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 c28:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <uxSchedulerSuspended>
 c2c:	88 23       	and	r24, r24
 c2e:	21 f0       	breq	.+8      	; 0xc38 <vTaskSwitchContext+0x10>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 c30:	81 e0       	ldi	r24, 0x01	; 1
 c32:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <xYieldPending>
 c36:	08 95       	ret
    }
    else
    {
        xYieldPending = pdFALSE;
 c38:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <xYieldPending>
            }
        #endif

        /* Select a new task to run using either the generic C or port
         * optimised asm code. */
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 c3c:	20 91 5b 06 	lds	r18, 0x065B	; 0x80065b <uxTopReadyPriority>
 c40:	01 c0       	rjmp	.+2      	; 0xc44 <vTaskSwitchContext+0x1c>
 c42:	21 50       	subi	r18, 0x01	; 1
 c44:	82 2f       	mov	r24, r18
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	fc 01       	movw	r30, r24
 c4a:	ee 0f       	add	r30, r30
 c4c:	ff 1f       	adc	r31, r31
 c4e:	ee 0f       	add	r30, r30
 c50:	ff 1f       	adc	r31, r31
 c52:	ee 0f       	add	r30, r30
 c54:	ff 1f       	adc	r31, r31
 c56:	e8 0f       	add	r30, r24
 c58:	f9 1f       	adc	r31, r25
 c5a:	e8 57       	subi	r30, 0x78	; 120
 c5c:	f9 4f       	sbci	r31, 0xF9	; 249
 c5e:	30 81       	ld	r19, Z
 c60:	33 23       	and	r19, r19
 c62:	79 f3       	breq	.-34     	; 0xc42 <vTaskSwitchContext+0x1a>
 c64:	ac 01       	movw	r20, r24
 c66:	44 0f       	add	r20, r20
 c68:	55 1f       	adc	r21, r21
 c6a:	44 0f       	add	r20, r20
 c6c:	55 1f       	adc	r21, r21
 c6e:	44 0f       	add	r20, r20
 c70:	55 1f       	adc	r21, r21
 c72:	48 0f       	add	r20, r24
 c74:	59 1f       	adc	r21, r25
 c76:	df 01       	movw	r26, r30
 c78:	01 80       	ldd	r0, Z+1	; 0x01
 c7a:	f2 81       	ldd	r31, Z+2	; 0x02
 c7c:	e0 2d       	mov	r30, r0
 c7e:	02 80       	ldd	r0, Z+2	; 0x02
 c80:	f3 81       	ldd	r31, Z+3	; 0x03
 c82:	e0 2d       	mov	r30, r0
 c84:	12 96       	adiw	r26, 0x02	; 2
 c86:	fc 93       	st	X, r31
 c88:	ee 93       	st	-X, r30
 c8a:	11 97       	sbiw	r26, 0x01	; 1
 c8c:	45 57       	subi	r20, 0x75	; 117
 c8e:	59 4f       	sbci	r21, 0xF9	; 249
 c90:	e4 17       	cp	r30, r20
 c92:	f5 07       	cpc	r31, r21
 c94:	29 f4       	brne	.+10     	; 0xca0 <vTaskSwitchContext+0x78>
 c96:	42 81       	ldd	r20, Z+2	; 0x02
 c98:	53 81       	ldd	r21, Z+3	; 0x03
 c9a:	fd 01       	movw	r30, r26
 c9c:	52 83       	std	Z+2, r21	; 0x02
 c9e:	41 83       	std	Z+1, r20	; 0x01
 ca0:	fc 01       	movw	r30, r24
 ca2:	ee 0f       	add	r30, r30
 ca4:	ff 1f       	adc	r31, r31
 ca6:	ee 0f       	add	r30, r30
 ca8:	ff 1f       	adc	r31, r31
 caa:	ee 0f       	add	r30, r30
 cac:	ff 1f       	adc	r31, r31
 cae:	8e 0f       	add	r24, r30
 cb0:	9f 1f       	adc	r25, r31
 cb2:	fc 01       	movw	r30, r24
 cb4:	e8 57       	subi	r30, 0x78	; 120
 cb6:	f9 4f       	sbci	r31, 0xF9	; 249
 cb8:	01 80       	ldd	r0, Z+1	; 0x01
 cba:	f2 81       	ldd	r31, Z+2	; 0x02
 cbc:	e0 2d       	mov	r30, r0
 cbe:	86 81       	ldd	r24, Z+6	; 0x06
 cc0:	97 81       	ldd	r25, Z+7	; 0x07
 cc2:	90 93 ad 06 	sts	0x06AD, r25	; 0x8006ad <pxCurrentTCB+0x1>
 cc6:	80 93 ac 06 	sts	0x06AC, r24	; 0x8006ac <pxCurrentTCB>
 cca:	20 93 5b 06 	sts	0x065B, r18	; 0x80065b <uxTopReadyPriority>
 cce:	08 95       	ret

00000cd0 <uCConfigPorts>:
 *  Author: medin
 */ 
#include "uCConfigPorts.h"

void uCConfigPorts(void)
{
 cd0:	08 95       	ret

00000cd2 <moduleStartTasks>:
#include "module.h"



void moduleStartTasks(unsigned portBASE_TYPE uxPriority)
{
 cd2:	ef 92       	push	r14
 cd4:	ff 92       	push	r15
 cd6:	0f 93       	push	r16
 cd8:	08 2f       	mov	r16, r24
	xMyTaskParameters *pxTaskParameters;

	pxTaskParameters = (xMyTaskParameters *) pvPortMalloc(sizeof(xMyTaskParameters));
 cda:	80 e0       	ldi	r24, 0x00	; 0
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	0e 94 49 00 	call	0x92	; 0x92 <pvPortMalloc>
	
	xTaskCreate( 
 ce2:	e1 2c       	mov	r14, r1
 ce4:	f1 2c       	mov	r15, r1
 ce6:	9c 01       	movw	r18, r24
 ce8:	45 e5       	ldi	r20, 0x55	; 85
 cea:	50 e0       	ldi	r21, 0x00	; 0
 cec:	66 e6       	ldi	r22, 0x66	; 102
 cee:	70 e0       	ldi	r23, 0x00	; 0
 cf0:	80 e8       	ldi	r24, 0x80	; 128
 cf2:	96 e0       	ldi	r25, 0x06	; 6
 cf4:	0e 94 9f 03 	call	0x73e	; 0x73e <xTaskCreate>
				module, 
				(const portCHAR *)"tareaNo1", 
				configMINIMAL_STACK_SIZE, (void *)  pxTaskParameters, 
				uxPriority, (xTaskHandle *) NULL 
				);
 cf8:	0f 91       	pop	r16
 cfa:	ff 90       	pop	r15
 cfc:	ef 90       	pop	r14
 cfe:	08 95       	ret

00000d00 <module>:

#include "module.h"
#include "moduleConfig.h"

void module(void *pvParameters)
{
 d00:	ff cf       	rjmp	.-2      	; 0xd00 <module>

00000d02 <main>:
#include "../src/uCConfig.h"
#include "../src/module.h"

int main(void)
{
	uCConfigPorts();
 d02:	0e 94 68 06 	call	0xcd0	; 0xcd0 <uCConfigPorts>

	moduleStartTasks(tskIDLE_PRIORITY + 1);
 d06:	81 e0       	ldi	r24, 0x01	; 1
 d08:	0e 94 69 06 	call	0xcd2	; 0xcd2 <moduleStartTasks>

	vTaskStartScheduler();
 d0c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <vTaskStartScheduler>

	return 0;
}
 d10:	80 e0       	ldi	r24, 0x00	; 0
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	08 95       	ret

00000d16 <_exit>:
 d16:	f8 94       	cli

00000d18 <__stop_program>:
 d18:	ff cf       	rjmp	.-2      	; 0xd18 <__stop_program>
